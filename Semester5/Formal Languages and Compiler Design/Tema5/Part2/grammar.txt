PROGRAM -> STRUCT_DECLARATIONS void main ( ) { VAR_DECLARATIONS INSTRUCTIONS }
STRUCT_DECLARATIONS -> struct id { VAR_DECLARATIONS }
STRUCT_DECLARATIONS -> ε
VAR_DECLARATIONS -> VAR_DECLARATION VAR_DECLARATIONS
VAR_DECLARATIONS -> ε
VAR_DECLARATION -> DATA_TYPE id VAR_DECLARATION_TAIL ;
VAR_DECLARATION_TAIL -> ε
VAR_DECLARATION_TAIL -> = EXPRESSION 
DATA_TYPE -> int
DATA_TYPE -> float
DATA_TYPE -> struct
INSTRUCTIONS -> INSTRUCTION INSTRUCTIONS
INSTRUCTIONS -> ε
INSTRUCTION -> IN_INSTR ;
INSTRUCTION -> OUT_INSTR ;
INSTRUCTION -> ASSIGNMENT_INSTR ;
INSTRUCTION -> CONTROL_INSTR
INSTRUCTION -> LOOP_INSTR
INSTRUCTION -> ;
IN_INSTR -> cin INPUT_CHAIN
INPUT_CHAIN -> >> id INPUT_CHAIN
INPUT_CHAIN -> ε
OUT_INSTR -> cout OUTPUT_CHAIN
OUTPUT_CHAIN -> << OUTPUT_CHAIN_TAIL 
OUTPUT_CHAIN -> ε
OUTPUT_CHAIN_TAIL -> EXPRESSION OUTPUT_CHAIN
OUTPUT_CHAIN_TAIL -> endl OUTPUT_CHAIN
ASSIGNMENT_INSTR -> id = EXPRESSION
CONTROL_INSTR -> if ( CONDITION ) { INSTRUCTIONS } ELSE_PART
ELSE_PART -> else { INSTRUCTIONS }
ELSE_PART -> ε
LOOP_INSTR -> for ( ASSIGNMENT_INSTR ; CONDITION ; ASSIGNMENT_INSTR ) { INSTRUCTIONS }
CONDITION -> EXPRESSION CONDITION_OPERATOR EXPRESSION
CONDITION_OPERATOR -> < 
CONDITION_OPERATOR -> <= 
CONDITION_OPERATOR -> > 
CONDITION_OPERATOR -> >= 
CONDITION_OPERATOR -> == 
CONDITION_OPERATOR -> != 
EXPRESSION -> TERM EXPRESSION_TAIL
EXPRESSION_TAIL -> EXPRESSION_OPERATOR TERM EXPRESSION_TAIL
EXPRESSION_TAIL -> ε
TERM -> FACTOR TERM_TAIL
TERM_TAIL -> MUL_DIV_MOD FACTOR TERM_TAIL
TERM_TAIL -> ε
FACTOR -> id
FACTOR -> const
FACTOR -> ( EXPRESSION )
EXPRESSION_OPERATOR -> +
EXPRESSION_OPERATOR -> -
MUL_DIV_MOD -> *
MUL_DIV_MOD -> /
MUL_DIV_MOD -> %